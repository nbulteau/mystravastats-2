package me.nicolas.stravastats.api.dto

import me.nicolas.stravastats.domain.business.strava.DetailedActivity
import me.nicolas.stravastats.domain.business.strava.Gear
import me.nicolas.stravastats.domain.business.strava.GeoMap

data class DetailedActivityDto (
    val achievementCount: Int,
    val athlete: Long,
    val athleteCount: Int,
    val averageCadence: Double,
    val averageSpeed: Double,
    val averageTemp: Int,
    val averageWatts: Double,
    val calories: Double,
    val commentCount: Int,
    val commute: Boolean,
    val description: String,
    val deviceName: String?,
    val deviceWatts: Boolean,
    val distance: Int,
    val elapsedTime: Int,
    val elevHigh: Double,
    val elevLow: Double,
    val embedToken: String,
    val endLatLng: List<Double>,
    val externalId: String,
    val flagged: Boolean,
    val fromAcceptedTag: Boolean,
    val gear: Gear,
    val gearId: String,
    val hasHeartRate: Boolean,
    val hasKudoed: Boolean,
    val hideFromHome: Boolean,
    val id: Long,
    val kilojoules: Double,
    val kudosCount: Int,
    val leaderboardOptOut: Boolean,
    val map: GeoMap?,
    val manual: Boolean,
    val maxSpeed: Double,
    val maxWatts: Int,
    val movingTime: Int,
    val name: String,
    val prCount: Int,
    val isPrivate: Boolean,
    val resourceState: Int,
    val segmentEfforts: List<SegmentEffortDto>,
    val segmentLeaderboardOptOut: Boolean,
    val splitsMetric: List<SplitsMetricDto>,
    val sportType: String,
    val startDate: String,
    val startSateLocal: String,
    val startLatLng: List<Double>,
    val sufferScore: Double?,
    val timezone: String,
    val totalElevationGain: Int,
    val totalPhotoCount: Int,
    val trainer: Boolean,
    val type: String,
    val uploadId: Long,
    val utcOffset: Int,
    val weightedAverageWatts: Int,
    val workoutType: Int,
)

fun DetailedActivity.toDto(): DetailedActivityDto {
    return DetailedActivityDto(
        achievementCount = achievementCount,
        athlete = athlete.id,
        athleteCount = athleteCount,
        averageCadence = averageCadence,
        averageSpeed = averageSpeed,
        averageTemp = averageTemp,
        averageWatts = averageWatts,
        calories = calories,
        commentCount = commentCount,
        commute = commute,
        description = description,
        deviceName = deviceName,
        deviceWatts = deviceWatts,
        distance = distance,
        elapsedTime = elapsedTime,
        elevHigh = elevHigh,
        elevLow = elevLow,
        embedToken = embedToken,
        endLatLng = endLatLng,
        externalId = externalId,
        flagged = flagged,
        fromAcceptedTag = fromAcceptedTag,
        gear = gear,
        gearId = gearId,
        hasHeartRate = hasHeartRate,
        hasKudoed = hasKudoed,
        hideFromHome = hideFromHome,
        id = id,
        kilojoules = kilojoules,
        kudosCount = kudosCount,
        leaderboardOptOut = leaderboardOptOut,
        map = map,
        manual = manual,
        maxSpeed = maxSpeed,
        maxWatts = maxWatts,
        movingTime = movingTime,
        name = name,
        prCount = prCount,
        isPrivate = isPrivate,
        resourceState = resourceState,
        segmentEfforts = segmentEfforts.map { it.toDto() },
        segmentLeaderboardOptOut = segmentLeaderboardOptOut,
        splitsMetric = splitsMetric.map { it.toDto() },
        sportType = sportType,
        startDate = startDate,
        startSateLocal = startSateLocal,
        startLatLng = startLatLng,
        sufferScore = sufferScore,
        timezone = timezone,
        totalElevationGain = totalElevationGain,
        totalPhotoCount = totalPhotoCount,
        trainer = trainer,
        type = type,
        uploadId = uploadId,
        utcOffset = utcOffset,
        weightedAverageWatts = weightedAverageWatts,
        workoutType = workoutType,
    )
}
